{"meta":{"title":"Rootxb🍋","subtitle":null,"description":"个人博客","author":"小白","url":"https://rootbtn.github.io","root":"/"},"pages":[{"title":"404 'Oops~ ,我崩溃了! 找不到你想要的页面 :('","date":"2022-11-09T05:24:40.000Z","updated":"2023-03-02T13:15:16.798Z","comments":true,"path":"404.html","permalink":"https://rootbtn.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2023-03-02T09:37:46.267Z","updated":"2023-03-02T09:37:46.267Z","comments":false,"path":"books/index.html","permalink":"https://rootbtn.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-11-09T05:21:11.000Z","updated":"2023-03-03T02:08:36.887Z","comments":true,"path":"about/index.html","permalink":"https://rootbtn.github.io/about/index.html","excerpt":"","text":"&#123; name: &#39;小白&#39; age: 24, gender: &#39;男&#39;, profession: &#39;Web Developer &amp; Designer&#39;, experience: &#39;2年&#39;, address: &#39;黑龙江哈尔滨&#39;, education: &#39;专科&#39;, github: &#39;https://github.com/Rootbtn/&#39;, blog: &#39;https://rootbtn.github.io&#39;, email: &#39;this_zhuchunyu163@.com&#39;, description: &#39;致力于网站建设与前端用户体验设计&#39;, skills: [ [&#39;Html&#39;, &#39;Javascript&#39;, &#39;jQuery&#39;, &#39;CSS&#39;, &#39;ES6&#39;, &#39;Node&#39;], [&#39;Webpack&#39;, &#39;Gulp&#39;], [&#39;Less&#39;,&#39;Sass&#39;], [&#39;Git&#39;, &#39;SVN&#39;], [&#39;Vue&#39;], [&#39;Bootstrap&#39;], [&#39;平面设计&#39;] ], devTools: [ [&#39;Sublime Text&#39;, &#39;Visual Studio Code&#39;, &#39;Notepad++&#39;], [&#39;Chrome DevTools&#39;], ] &#125;"},{"title":"contact","date":"2022-11-09T05:19:15.000Z","updated":"2022-11-09T12:34:56.659Z","comments":true,"path":"contact/index.html","permalink":"https://rootbtn.github.io/contact/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-11-09T05:12:31.000Z","updated":"2023-03-02T12:58:14.639Z","comments":true,"path":"categories/index.html","permalink":"https://rootbtn.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-03-02T12:25:11.829Z","updated":"2023-03-02T12:25:11.829Z","comments":false,"path":"links/index.html","permalink":"https://rootbtn.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-09T05:15:04.000Z","updated":"2023-03-02T12:59:56.238Z","comments":true,"path":"tags/index.html","permalink":"https://rootbtn.github.io/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-11-09T05:24:40.000Z","updated":"2022-11-09T05:25:08.199Z","comments":true,"path":"friends/index.html","permalink":"https://rootbtn.github.io/friends/index.html","excerpt":"","text":""},{"title":"项目","date":"2023-03-02T13:01:28.045Z","updated":"2023-03-02T13:01:28.045Z","comments":false,"path":"repository/index.html","permalink":"https://rootbtn.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"那些有趣的注释，有没有你曾用过的","slug":"cheng","date":"2023-03-02T13:46:07.085Z","updated":"2023-03-03T02:51:38.555Z","comments":true,"path":"2023/03/02/cheng/","link":"","permalink":"https://rootbtn.github.io/2023/03/02/cheng/","excerpt":"","text":"闲来无事收集了一些有趣的注释，各式各样的都有，程序员真是一群有趣的人，喜欢哪一款拿走不谢 第一款：佛祖保佑，永无BUG // _ooOoo_ // o8888888o // 88&quot; . &quot;88 // (| -_- |) // O\\ = /O // ____/`---&#39;\\____ // . &#39; \\\\| |// `. // / \\\\||| : |||// \\ // / _||||| -:- |||||- \\ // | | \\\\\\ - /// | | // | \\_| &#39;&#39;\\---/&#39;&#39; | | // \\ .-\\__ `-` ___/-. / // ___`. .&#39; /--.--\\ `. . __ // .&quot;&quot; &#39;&lt; `.___\\_&lt;|&gt;_/___.&#39; &gt;&#39;&quot;&quot;. // | | : `- \\`.;`\\ _ /`;.`/ - ` : | | // \\ \\ `-. \\_ __\\ /__ _/ .-` / / // ======`-.____`-.___\\_____/___.-`____.-&#39;====== // `=---=&#39; // // ............................................. // 佛祖保佑 永无BUG 第二款：神兽护体，永无BUG // ┏┓ ┏┓ // ┏┛┻━━━┛┻┓ // ┃ ┃ // ┃ ━ ┃ // ┃ ┳┛ ┗┳ ┃ // ┃ ┃ // ┃ ┻ ┃ // ┃ ┃ // ┗━┓ ┏━┛ // ┃ ┃ Code is far away from bug with the animal protecting // ┃ ┃ 神兽保护，永无BUG！ // ┃ ┗━━━┓ // ┃ ┣┓ // ┃ ┏┛ // ┗┓┓┏━┳┓┏┛ // ┃┫┫ ┃┫┫ // ┗┻┛ ┗┻┛ /** * ┏┓ ┏┓+ + * ┏┛┻━━━┛┻┓ + + * ┃ ┃ * ┃ ━ ┃ ++ + + + * ████━████ ┃+ * ┃ ┃ + * ┃ ┻ ┃ * ┃ ┃ + + * ┗━┓ ┏━┛ * ┃ ┃ * ┃ ┃ + + + + * ┃ ┃ Code is far away from bug with the animal protecting * ┃ ┃ + 神兽保佑,永无bug * ┃ ┃ * ┃ ┃ + * ┃ ┗━━━┓ + + * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ + + + + * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛+ + + + */ 第三款：来首程序员打油诗，笑 /** * 江城子 . 程序员之歌 * * 十年生死两茫茫，写程序，到天亮。 * 千行代码，Bug何处藏。 * 纵使上线又怎样，朝令改，夕断肠。 * * 领导每天新想法，天天改，日日忙。 * 相顾无言，惟有泪千行。 * 每晚灯火阑珊处，夜难寐，加班狂。 */ /** * 写字楼里写字间，写字间里程序员； * 程序人员写程序，又拿程序换酒钱。 * 酒醒只在网上坐，酒醉还来网下眠； * 酒醉酒醒日复日，网上网下年复年。 * 但愿老死电脑间，不愿鞠躬老板前； * 奔驰宝马贵者趣，公交自行程序员。 * 别人笑我忒疯癫，我笑自己命太贱； * 不见满街漂亮妹，哪个归得程序员？ */ 第四款：无尽诱惑 // // .::::. // .::::::::. // ::::::::::: // ..:::::::::::&#39; // &#39;::::::::::::&#39; // .:::::::::: // &#39;::::::::::::::.. // ..::::::::::::. // ``:::::::::::::::: // ::::``:::::::::&#39; .:::. // ::::&#39; &#39;:::::&#39; .::::::::. // .::::&#39; :::: .:::::::&#39;::::. // .:::&#39; ::::: .:::::::::&#39; &#39;:::::. // .::&#39; :::::.:::::::::&#39; &#39;:::::. // .::&#39; ::::::::::::::&#39; ``::::. // ...::: ::::::::::::&#39; ``::. // ```` &#39;:. &#39;:::::::::&#39; ::::.. // &#39;.:::::&#39; &#39;:&#39;````.. /** * _.._ ,------------. * ,&#39; `. ( We want you! ) * / __) __` \\ `-,----------&#39; * ( (`-`(-&#39;) ) _.-&#39; * /) \\ = / ( * /&#39; |--&#39; . \\ * ( ,---| `-.)__` * )( `-.,--&#39; _`-. * &#39;/,&#39; ( Uu&quot;, * (_ , `/,-&#39; ) * `.__, : `-&#39;/ /`--&#39; * | `--&#39; | * ` `-._ / * \\ ( * /\\ . \\. * / |` \\ ,-\\ * / \\| .) / \\ * ( ,&#39;|\\ ,&#39; : * | \\,`.`--&quot;/ &#125; * `,&#39; \\ |,&#39; / * / &quot;-._ `-/ | * &quot;-. &quot;-.,&#39;| ; * / _/[&quot;---&#39;&quot;&quot;] * : / |&quot;- &#39; * &#39; | / * ` | */ 第五款：单身狗专用 &lt;!-- :: :;J7, :, ::;7: ,ivYi, , ;LLLFS: :iv7Yi :7ri;j5PL ,:ivYLvr ,ivrrirrY2X, :;r@Wwz.7r: :ivu@kexianli. :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17 ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i :,, ,,: ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv, ,::, ::rv77iiiriii:iii:i::,rvLq@huhao.Li ,, ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712: ::: ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri , 2OBBOi,iiir;r:: ,irriiii::,, ,iv7Luur: ,, i78MBBi,:,:::,:, :7FSL: ,iriii:::i::,,:rLqXv:: : iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;:: , ::::i ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii , : , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri: , ,,,,::::i: @arqiao. ,:,, ,:::ii;i7: :, rjujLYLi ,,:::::,:::::::::,, ,:i,:,,,,,::i:iii :: BBBBBBBBB0, ,,::: , ,:::::: , ,,,, ,,::::::: i, , ,8BMMBBBBBBi ,,:,, ,,, , , , , , :,::ii::i:: : iZMOMOMBBM2::::::::::,,,, ,,,,,,:,,,::::i:irr:i:::, i ,,:;u0MBMOG1L:::i:::::: ,,,::, ,,, ::::::i:i:iirii:i:i: : ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri:: : :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::, : 5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu., , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii:: :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii: ,: :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i, ,,, ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i, , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri:: :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii::: --&gt;","categories":[{"name":"程序员","slug":"程序员","permalink":"https://rootbtn.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"}],"tags":[{"name":"程序员","slug":"程序员","permalink":"https://rootbtn.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"}]},{"title":"js数组去重（六种方法）","slug":"js","date":"2023-01-26T09:35:55.997Z","updated":"2023-01-26T10:38:24.659Z","comments":true,"path":"2023/01/26/js/","link":"","permalink":"https://rootbtn.github.io/2023/01/26/js/","excerpt":"","text":"参考文档一.js数组去重（六种方法）我自己总结的，只知道这六种去重，其他的不经常用！！！原数组const arr &#x3D; [1, 1, ‘1’, 17, true, true, false, false, ‘true’, ‘a’, {}, {}]; 1.new Set（数组ES6新增的特性）Set是一系列无序、没有重复值的数据集合，传入一个需要去重的数组，Set会自动删除重复的元素再将Set转数组返回。此方法效率高，代码清晰，缺点是存在兼容性问题 const newArr = [...new Set(arr)]; console.log(newArr);// [1, &#39;1&#39;, 17, true, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;] 2.new Map（MapES6新增的特性）利用Map的键值对同名覆盖，再将Map转数组 const m = new Map(); for (let i = 0; i &lt; arr.length; i++) &#123; m.set(arr[i], arr[i]); &#125; const newArr = [] m.forEach(function (value, key) &#123; newArr .push(value) &#125;) console.log(newArr );//[1, &#39;1&#39;, 17, true, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;] 3.indexOf（下标属性来查询）利用对象属性key排除重复项遍历数组，每次判断新数组中是否存在该属性，不存在就存储在新数组中并把数组元素作为key，最后返回新数组这个方法的优点是效率高，缺点是使用了额外空间 var newArr = []; arr.forEach((key,index)=&gt;&#123; if(newArr.indexOf(key) === -1)&#123; newArr.push(key) &#125; &#125;) console.log(newArr);// [1, &#39;1&#39;, 17, true, false, &#39;true&#39;, &#39;a&#39;, &#123;&#125;, &#123;&#125;] 4.sort(数组排序)先使用sort方法对传入函数的数组进行从小到大排序，然后创建一个新数组，先将排序好的数组的第一个元素添加到新数组中然后从第二个元素开始遍历排序好的数组，让每个数组元素都和它的前一个元素比较，如果他们的值不相同，则将该元素值添加到新数组中，最终返回这个新数组。 function uniqArr(arr) &#123; var sortArr = arr.sort(function (a, b) &#123; return a - b &#125;) var newArr = [] newArr[0] = sortArr[0] for (var i = 1; i &lt; sortArr.length; i++) &#123; if (sortArr[i] != sortArr[i - 1]) &#123; newArr.push(sortArr[i]) &#125; &#125; return newArr &#125; 5.splice()方法去重遍历传递进函数的数组，让它和它之后的每一个元素进行比较，如果后边的元素中，有和它的值相等的，就将这个元素通过splice方法删除，然后对应的将数组长度-1，相应下标-1 function uniqArr(arr) &#123; var len = arr.length for (var i = 0; i &lt; len; i++) &#123; for (var j = i + 1; j &lt; len; j++) &#123; if (arr[i] == arr[j]) &#123; arr.splice(j, 1) // 修正下标 j-- len-- &#125; &#125; &#125; return arr &#125; 6.双重for循环去重先创建一个新的空数组，然后循环遍历传入函数的数组，每次都让遍历到的数组元素和他后边的所有元素进行比较，如果有值和它相同的，就将它的值设置为一个空字符串，比较完毕后，判断这个元素是不是也是一个空字符串，如果不是，那就将其添加到新数组中，最后返回这个新数组。 function uniqArr(arr) &#123; var newArr = [] for (var i = 0; i &lt; arr.length; i++) &#123; for (var j = i + 1; j &lt; arr.length; j++) &#123; if (arr[i] == arr[j]) &#123; arr[j] = &#39; &#39; &#125; &#125; if (arr[i] != &#39; &#39;) &#123; newArr.push(arr[i]) &#125; &#125; return newArr &#125;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/tags/web%E5%89%8D%E7%AB%AF/"}]},{"title":"HTML5 语义化标签","slug":"html","date":"2022-11-09T07:27:51.000Z","updated":"2023-01-26T10:28:43.610Z","comments":true,"path":"2022/11/09/html/","link":"","permalink":"https://rootbtn.github.io/2022/11/09/html/","excerpt":"","text":"有助于团队合作的css命名规范常用的css命名规则快捷导航栏: shortcut 头部：header 标志: logo 购物车: shopcar 内容：content&#x2F;container 尾：footer 导航：nav 导航左侧: dropdown 包含.dd .dt 导航右侧: navitems 侧栏：sidebar 栏目：column 左右中：left right center 登录条：loginbar 广告：banner 页面主体：main 热点：hot 新闻：news 下载：download 子导航：subnav 菜单：menu 子菜单：submenu 搜索：search 友情链接：friendlink 页脚：footer 版权：copyright 滚动：scroll 内容：content 标签页：tab 文章列表：list 提示信息：msg 小技巧：tips 栏目标题：title 加入：joinus 指南：guild 注册：regsiter 状态：status 投票：vote 合作伙伴：partner 页面外围控制整体布局宽度：wrapper 页面底部服务模块: mod_service 页面底部帮助模块: mod_help 页面底部版权模块: mod_copyright id的命名:(1)页面结构容器: container 页头：header 内容：content&#x2F;container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center (2)导航导航：nav 主导航：mainbav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题: title 摘要: summary (3)功能标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：regsiter 搜索：search 功能区：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 当前的: current 小技巧：tips 图标: icon 注释：note 指南：guild 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright (四)class的命名:(1)颜色:使用颜色的名称或者16进制代码,如.red { color: red; } .ccc { color: #ccc; } .f5f5f5 { color: #f5f5f5; } (2)字体大小,直接使用”font+字体大小”作为名称,如.font12px { font-size: 12px; } .font9pt {font-size: 9pt; } (3)对齐样式,使用对齐目标的英文名称,如.left { float:left; } .bottom { float:bottom; } 注意事项:css部分主要的 master.css 模块 module.css 基本共用 base.css 布局，版面 layout.css 主题 themes.css 专栏 columns.css 文字 font.css 表单 forms.css 补丁 mend.css 打印 print.css","categories":[{"name":"HTML5","slug":"HTML5","permalink":"https://rootbtn.github.io/categories/HTML5/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/tags/web%E5%89%8D%E7%AB%AF/"}]},{"title":"git","slug":"git","date":"2022-11-09T05:15:04.000Z","updated":"2022-11-09T11:20:36.421Z","comments":true,"path":"2022/11/09/git/","link":"","permalink":"https://rootbtn.github.io/2022/11/09/git/","excerpt":"","text":"1、用特定的软件打开文件open -a 软件名称 文件目录 2、git查看配置信息 git config –list git config user.name 3、配置个人的用户名称和电子邮件地址 git config –global user.name “runoob” git config –global user.email &#116;&#x65;&#115;&#x74;&#x40;&#114;&#x75;&#x6e;&#x6f;&#x6f;&#98;&#46;&#x63;&#x6f;&#109; 4、git基本概念 Git 工作区、暂存区和版本库概念： 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库 5、git提交代码到仓库 git add *.c git add README git commit -m ‘初始化项目版本’ git init git add . git commit 6、拷贝项目到本地 git clone 链接url 7、提交与修改 git add 添加文件到仓库 git status 查看仓库当前的状态，显示有变更的文件。 git diff 比较文件的不同，即暂存区和工作区的差异。 git commit 提交暂存区到本地仓库。 git reset 回退版本。 git rm 删除工作区文件。 git mv 移动或重命名工作区文件。 8、提交日志 git log 查看历史提交记录 git blame 以列表形式查看指定文件的历史修改记录 9、远程操作 git remote 远程仓库操作 git fetch 从远程获取代码库 git pull 下载远程代码并合并 git push 上传远程代码并合并 10、Git 分支管理 git branch 查看分支 git branch aa 添加分支aa git checkout aa 切换到aa分支 git branch -d aa 删除aa分支 git branch -d aa 合并完后就可以删除分支:","categories":[{"name":"git","slug":"git","permalink":"https://rootbtn.github.io/categories/git/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/tags/web%E5%89%8D%E7%AB%AF/"}]},{"title":"web开发","slug":"RootBn","date":"2022-11-08T13:37:46.000Z","updated":"2022-11-09T11:21:39.727Z","comments":true,"path":"2022/11/08/RootBn/","link":"","permalink":"https://rootbtn.github.io/2022/11/08/RootBn/","excerpt":"","text":"参考文档一.前端开发的概念介绍及前端开发的核心 前端的概念：用户可以直接看见并交互的界面,即浏览器上运行的用户交互界面 (浏览器端，客户端)。 前端的基础技术栈： HTML CSS JavaScript介绍 JavaScript 诞生于 1995 年。布兰登·艾奇（Brendan Eich）开发。 JavaScript是一种轻量级、解释型的Web开发脚本语言 浏览器脚本语言，可以编写运行在浏览器上的程序 负责编写页面特效、调用浏览器的API(BOM)、操作改变页面内容(DOM)，从后端获取数据(Ajax)，渲染页面等 文件后缀：.js 前端核心工作组成部分： 数据渲染（根据数据设计html结构，渲染页面，展示页面…….） 用户体验（网页效果，表单验证，其他功能……） 性能优化（精灵图，懒加载 ，代码的压缩合并，图片的压缩合并，css的预编译…….） 二.javascript的核心组成及如何运行Js 1.javascript的核心组成 核心（ECMAScript）：描述了该语言的语法和基本对象。 文档对象模型（DOM）：描述处理网页内容的方法和接口 浏览器对象模型（BOM）：描述与浏览器进行交互的方法和接口。 2.如何引入js文件 引入外部js &lt;script src=&quot;.js文件存放路径&quot;&gt;&lt;/script&gt;这个方法是在外部单独建立一个js文件，页面中所有的js都在这一个页面中。易于维护，方便多次使用。 当前页面中 直接把js效果写在&lt;script&gt;&lt;/script&gt;标签中即可。这部分内容可以放在页面中的任何位置。但是一般放在页面的底部。这样的话便于页面加载完成再执行js文件。 三. 变量的概念 - 重点 1.概念： 所谓变量，就是特定时间用于保存特定值的一个名字而已，并且初始化后可以再次改变的量。 2.声明定义： 使用 var 操作符（var是关键字），后面跟一个变量名（变量名是标识符）,声明多个变量的时候，可以在一行或者多行操作，只要把每个变量用逗号分隔开即可，但最好分行写，可读性佳。 3.变量的特点 初始化后可以再次改变 变量是松散类型的，可以用来保存任何类型的数据。 变量提升 同时声明多个 写入内存 4.命名规则： 数字、字母、下划线、$符号组成，其中数字不能做开头。并且变量名应做到见名知意，常用的方式有驼峰命名法，匈牙利命名法，同时变量名不能是保留字或者关键字 。 驼峰命名：第二个单词开始，首字母大写。 大驼峰：第一个单词的首字母大写 UserName 小驼峰：第二个单词开始首字母大写 userName &#x2F; getElementById() 5.保留字和关键字 关键字：一组具有特定用途的关键字，这些关键字可用于表示控制语句的开始或结束，或者用于执行特定操作等。 break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try 保留字：尽管保留字在这门语言中还没有任何特定的用途，但它们有可能在将来被用作关键字。 abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public 四.变量的数据类型 ECMAScript5 之前有 5 种简单数据类型：number数字 、 string字符串、boolean布尔值、undefined未定义、null空对象。 还有一种复杂数据类型（引用类型）——object 检测变量类型的方法：typeof( 变量名 ) 或者 typeof 变量名 变量的数据类型（Undefined、Null：特殊类型） 注意：typeof可以输出变量的数据类型，但这个数据类型的类型都是字符串。 五.赋值、数学、关系运算符 1.赋值运算符 &#x3D; 将等式右边的结果赋值给左边。 javascript使用“ &#x3D; ”运算符来给变量或者属性赋值（最低优先级） 复合赋值操作 +&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D; 带操作的复合赋值运算,（更快捷，更优）。 2.数学运算符 + - * &#x2F; % +：求和，连接字符作用（字符串和变量之间使用+号进行拼接） %：求余数（求模） 3.关系运算符（结果为布尔值） &lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、&#x3D;&#x3D;( 相等 )、&#x3D;&#x3D;&#x3D;（全等）、!&#x3D;(不相等) !&#x3D;&#x3D;（不全等） 理解&#x3D;、&#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;运算符之间的区别。 理解相等和恒等运算符 六.逻辑运算符 逻辑与(&amp;&amp;)操作可以应用于任何类型的操作数，而不仅仅是布尔值。在有一个操作数不是布尔值的情况下， 逻辑与操作就不一定返回布尔值。逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不 会再对第二个操作数求值。 逻辑或(||)和逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，逻辑或操作符也 是短路操作符。也就是说，如果第一个操作数的求值结果为true ，就不会对第二个操作数求值了。 逻辑非操作符由一个叹号（！）表示，可以应用于 ECMAScript 中的任何值。无论这个值是什么数据类型， 这个操作符都会返回一个布尔值。逻辑非操作符首先会将它的操作数转换为一个布尔值，然后再对其求反。 总结 逻辑与找的假的立刻结束，形成短路， 逻辑或找到真的立刻结束，形成短路。 七.一元运算符 一元运算符：++ – 只能操作一个值的操作符叫做一元操作符，是 ECMAScript 中最简单的操作符。 前置型应该位于要操作的变量之前，先将操作数+1或者减1，再参与运算。 后置型则应该位于要操作的变量之后，先参与运算后自身再+1或者减1。 八.变量不同类型之间的转换 1.显式转换：利用系统提供的函数(具有特定功能的代码块组成)强制转换或者手动转换 强制转换方法：Number( ) 、String( )、Boolean( ) 字符串转数字：parseInt( )、parseFloat( ) 2.隐式转换：系统自动根据当前的符号进行转换 + - * &#x2F; % &#x3D;&#x3D; ++ – ! …… 九.NaN和isNaN介绍 NaN的概念及应用 当数学计算无法得到数字结果，该变量的值为NaN(not a number) 注意：因为NaN代表非数字，它不等于任何值，也不能做运算， 即使alert(NaN &#x3D;&#x3D; NaN); 结果也是false typeof NaN &#x3D;&#x3D;&#x3D;‘number’ isNaN(num)方法，该方法判断num变量的值是否是NaN（不是一个数字）,结果是布尔值,如果num不是一个数字输出true 十.csdn搜的题 1.为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？ 2.var k&#x3D;0; console.log(k++ + ++k +k +k++ ); 3.输入一个五位数，分别输出个十百千万位； 4.基本测试题，并写出详细理由; var bar = true; console.log(bar + 0); console.log(bar + &quot;xyz&quot;); console.log(bar + true); console.log(bar + false); console.log(1 == true); console.log(1 === true); console.log(isNaN(23)); console.log(isNaN(&#39;shuai&#39;)); console.log(isNaN(&#39;321shuai&#39;)); console.log(isNaN(&#39;321&#39;)); console.log(NaN === NaN); console.log(typeof NaN); console.log(1 + +&quot;2&quot; + &quot;2&quot;); console.log(&quot;A&quot; - &quot;B&quot; + &quot;2&quot;); console.log(&quot;A&quot; - &quot;B&quot; + 2); console.log(0 || 2 || 1) console.log(0 &amp;&amp; 0 &amp;&amp; false); console.log(0.2 + 0.4 == 0.6); console.log(Boolean(&#39;0&#39;)); 5.基本测试题，并写出理由; var a = 10; var b = 20; var c = 10; console.log(a = b); console.log(a == b); console.log(a == c); 十一.学习网站 CSDN：https://www.csdn.net/ 力扣： https://leetcode-cn.com/problemset/all/ 牛客网：https://www.nowcoder.com/","categories":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/tags/web%E5%89%8D%E7%AB%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-11-08T13:27:37.274Z","updated":"2022-11-09T11:06:35.506Z","comments":true,"path":"2022/11/08/hello-world/","link":"","permalink":"https://rootbtn.github.io/2022/11/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://rootbtn.github.io/tags/Hello-World/"}]}],"categories":[{"name":"程序员","slug":"程序员","permalink":"https://rootbtn.github.io/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"},{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"HTML5","slug":"HTML5","permalink":"https://rootbtn.github.io/categories/HTML5/"},{"name":"git","slug":"git","permalink":"https://rootbtn.github.io/categories/git/"}],"tags":[{"name":"程序员","slug":"程序员","permalink":"https://rootbtn.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"},{"name":"web前端","slug":"web前端","permalink":"https://rootbtn.github.io/tags/web%E5%89%8D%E7%AB%AF/"},{"name":"Hello World","slug":"Hello-World","permalink":"https://rootbtn.github.io/tags/Hello-World/"}]}